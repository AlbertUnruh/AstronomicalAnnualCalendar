[tool.poetry]
name = "AstronomicalAnnualCalendar"
version = "0.1.0"
description = "A tool to help to generate the astronomical annual calendar"
license = "MIT"
authors = ["AlbertUnruh <AlbertUnruh@pm.me>"]
readme = "README.md"
repository = "https://github.com/AlbertUnruh/AstronomicalAnnualCalendar/"
homepage = "https://github.com/AlbertUnruh/AstronomicalAnnualCalendar/"

[tool.poetry.dependencies]
python = "^3.12"
click = "^8.1.7"
aenum = "^3.1.15"
pydantic = "^2.9.2"
pydantic-extra-types = "^2.9.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
black = "^24.10.0"

[tool.poetry.group.tests.dependencies]
pytest = "^8.3.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ["py312"]
include = "\\.pyi?$"

[tool.isort]
line_length = 120
py_version = 312
profile = "black"
lines_after_imports = 2
lines_between_sections = 1
split_on_trailing_comma = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
import_heading_stdlib = "standard library"
import_heading_thirdparty = "third party"
import_heading_firstparty = "first party"
import_heading_localfolder = "local"

[tool.ruff]
line-length = 120
target-version = "py312"
output-format = "concise" # set to full if you want to see the source of the error/warning

[tool.ruff.lint]
task-tags = ["TODO", "FIXME", "NOTE"]
select = [
    "F",    # Pyflakes
    "E",    # pycodestyle
    "C90",  # mccabe
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyudpgrade
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "LOG",  # flake8-logging
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "PTH",  # flake8-use-pathlib
    "PERF", # Perflint
    "FURB", # refurb
    "RUF",  # Ruff-specific rules
]
ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "N999",   # Invalid module name: '{name}' # I know, it should be snake_case, but who cares? I don't :P  ~AlbertUnruh
]
per-file-ignores = {"tests/*.py" = ["D103", "S101", "FBT001"]}

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-errmsg]
max-string-length = 20

[tool.ruff.lint.mccabe]
max-complexity = 13
